{"version":3,"file":"functions.js","mappings":"yBAiGAA,gBAAgBC,UAAU,cAzFnB,SAAoBC,GAKzB,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GAC/BH,GACHE,EAAQ,SAEZE,MARY,wCAQD,CACTC,OAPa,OAQbC,QAAS,CACL,eAAgB,mBAChB,cAAiB,8DAErBC,KAAMC,KAAKC,UAAU,CACjB,MAZQ,yBAaR,MAAST,MAGhBU,MAAK,SAAUC,GACd,OAAOA,EAASC,MAChB,IAEDF,MAAK,SAAUE,GACd,IAAMD,EAAWH,KAAKC,UAAUG,EAAKC,QAAQ,GAAGC,SAYhDZ,EATiB,UAAbS,EACO,SAEa,SAAbA,EACA,SAGA,QAGb,GACA,GACA,IAkDAb,gBAAgBC,UAAU,aAzCnB,SAAmBC,GAOxB,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GAC/BH,GACHE,EAAQ,SAEZE,MAVY,wCAUD,CACTC,OATa,OAUbC,QAAS,CACL,eAAgB,mBAChB,cAAiB,8DAErBC,KAAMC,KAAKC,UAAU,CACjB,MAdQ,iBAeR,OAdS,+EAcUT,EAbV,cAcT,WAAc,GACd,YAAe,EACf,MAAS,EACT,kBAAqB,GACrB,iBAAoB,EACpB,EAAK,MAGZU,MAAK,SAAUC,GACd,OAAOA,EAASC,MAChB,IAEDF,MAAK,SAAUE,GACd,IACIG,EADaP,KAAKC,UAAUG,EAAKI,QAAQ,GAAGhB,MACvBiB,QAAQ,OAAQ,IAAIA,QAAQ,SAAU,IAC3DC,EAAYH,EAAUI,cAAcC,OAAO,GAAGC,cAAgBN,EAAUO,MAAM,GAClFpB,EAAQgB,EACV,GACA,GACA,G","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/* global clearInterval, console, setInterval */\n\n/**\n * Content Moderation using ChatGPT\n * @customfunction\n * @param {string} text The text to be checked\n * @returns {string} Result whether the modertaion has passed or failed.\n */\nexport function moderation(text) {\n  const url = \"https://api.openai.com/v1/moderations\";\n  const apikey = process.env.OPENAI_API_KEY;\n  const method = \"POST\";\n  const model = \"text-moderation-latest\";\n  return new Promise(function (resolve, reject) {\n    if (!text) {\n      resolve(\"Blank\");\n  }\n  fetch(url, {\n    method: method,\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + apikey\n    },\n    body: JSON.stringify({\n        'model': model,\n        'input': text\n    })\n})\n.then(function (response){\n  return response.json();\n  }\n)\n.then(function (json) {\n  const response = JSON.stringify(json.results[0].flagged);\n  let result = \"\";\n  let cellcolor = \"\";\n  if (response === \"false\") {\n    result = \"Passed\";\n    cellcolor = \"green\";\n  } else if (response === \"true\") {\n    result = \"Failed\";\n    cellcolor = \"red\";\n  } else {\n    result = \"Error\";\n  }\n  resolve(result);\n})\n})\n}\n\n\n/**\n * Sentiment Analysis using ChatGPT\n * @customfunction\n * @param {string} text The text to be analyzed\n * @returns {string} Result whether the text is Positive, Negative or Neutral.\n */\nexport function sentiment(text) {\n  const url = \"https://api.openai.com/v1/completions\";\n  const apikey = process.env.OPENAI_API_KEY;\n  const method = \"POST\";\n  const model = \"text-curie-001\";\n  const prefix = \"Decide whether a Tweet's sentiment is positive, neutral, or negative. Tweet:\";\n  const suffix = \"Sentiment: \";\n  return new Promise(function (resolve, reject) {\n    if (!text) {\n      resolve(\"Blank\");\n  }\n  fetch(url, {\n    method: method,\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + apikey\n    },\n    body: JSON.stringify({\n        'model': model,\n        'prompt': prefix + text + suffix,\n        'max_tokens': 20,\n        'temperature': 0,\n        'top_p': 1,\n        'frequency_penalty': 0.5,\n        'presence_penalty': 0,\n        'n': 1\n    })\n})\n.then(function (response){\n  return response.json();\n  }\n)\n.then(function (json) {\n  const response = JSON.stringify(json.choices[0].text);\n  let response2 = response.replace(/\\\\n/g, '').replace(/['\"]+/g, '');\n  let response3 = response2.toLowerCase().charAt(0).toUpperCase() + response2.slice(1);\n  resolve(response3);\n})\n})\n}\nCustomFunctions.associate(\"MODERATION\", moderation);\nCustomFunctions.associate(\"SENTIMENT\", sentiment);"],"names":["CustomFunctions","associate","text","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","then","response","json","results","flagged","response2","choices","replace","response3","toLowerCase","charAt","toUpperCase","slice"],"sourceRoot":""}